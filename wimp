#!/bin/sh

# from Jeff Schaller on stackoverflow, thanks Jeff!
find_config() {
  if [ -d "$1" ]; then
    echo "${PWD%/}/$1"
  elif [ "$PWD" = / ]; then
    false
  else
    (cd .. && find_config "$1") # subshell so we don't affect caller's $PWD
  fi
}
wimp_dir="$(find_config ".wimp")"

service_name=$(echo $wimp_dir | openssl md5 | awk '{print $2 "-wimp.service"}')

wimp_init() {
  if [ -d "$wimp_dir" ]; then
    echo "This directory is already watched by a wimp"
  elif [[ -n $(find . -type d -name ".wimp") ]]; then
    echo "This directory already contains a wimp"
  else
    mkdir -p src template public .wimp
    if ! [ -f "/etc/systemd/system/$service_name" ]; then
      sudo touch /etc/systemd/system/$service_name
    fi
    echo "[Unit]
Description=Run wimp website generator
[Service]
Type=simple
ExecStart=sh -c \"inotifywait -qmre modify -e delete --format \\\"%e %w%f\\\" $wimp_dir/../src/ | \\
while read inotifymessage; do \\
  filepath=\\\${inotifymessage##* } \\
  outpath=\\\"\\\${filepath%.md}.html\\\"; outpath=\\\"$wimp_dir/../public/\\\${outpath##*src/}\\\" \\
  if [ \\\"\\\${inotifymessage%% *}\\\" = DELETE ]; then rm -rf \\\$outpath \\
  else sh -c 'if ! [ -d \\\"\\\${1%/*}\\\" ]; then mkdir \\\"\\\${1%/*}\\\"; fi \\
  pandoc --quiet -s \\\"\\\$0\" -o \\\"\\\$1\\\"' \\\$filepath \\\$outpath; fi \\
  done\"
Restart=on-failure
[Install]
WantedBy=default.target" | sudo tee /etc/systemd/system/$service_name
    sudo systemctl daemon-reload; sudo systemctl enable $service_name; sudo systemctl start $service_name
  fi
}

wimp_compile() {
  #TODO make sure this uses template dynamically
  #TODO convert links automatically
  sh -c 'outpath="${0%.md}.html"; outpath="./public/${outpath##*src/}"; \
if ! [ -d "${outpath%/*}" ]; then mkdir "${outpath%/*}"; fi; \
pandoc --quiet -s "$0" -H template/head.html -B template/before.html \
-A template/after.html -o $outpath' "$@"
}

wimp_compile_all() {
  #TODO make sure this uses template dynamically
  #TODO convert links automatically
  find $wimp_dir/../src/ -name '*.md' -type f -exec sh -c \
'outpath="${0%.md}.html"; outpath="./public/${outpath##*src/}"; \
if ! [ -d "${outpath%/*}" ]; then mkdir "${outpath%/*}"; fi; \
pandoc --quiet -s "$0" -H template/head.html -B template/before.html \
-A template/after.html -o $outpath' {} \;
}

wimp_status() {
  sudo systemctl status $service_name
}

wimp_restart() {
  sudo systemctl restart $service_name
}

wimp_clean() {
  sudo systemctl stop $service_name
  sudo rm /etc/systemd/system/$service_name
  rm -rf $wimp_dir/../src $wimp_dir/../public $wimp_dir/../template $wimp_dir
}

validate() {
  if [ ! -d "$wimp_dir" ]; then
    echo -e "This directory is not watched by a wimp\n(run \`wimp init\`)"; exit
  fi
}

if [ $# -eq 0 ]
then
  echo -e "usage: wimp <command>\n(run \`wimp help\` for more information)"
else
  cmd=$1 shift
  case $cmd in
    (init) wimp_init;;
    (status) validate; wimp_status;;
    (restart) validate; wimp_restart;;
    (compile) validate; wimp_compile $@;;
    (compile-all) validate; wimp_compile_all;;
    (clean) validate; wimp_clean;;
    (help) echo -e "The WIMP uses pandoc and inotify to dynamically manage a \
static website\ninit: create a wimp\ncompile-all: manually compile src files\n\
clean: remove all traces of wimp";;
    (*) echo -e "UNRECOGNIZED COMMAND\nusage: wimp <command>\n(run \`wimp help\` for more information)";;
  esac
fi

#!/bin/sh

# from Charles Duffy on stackoverflow, thanks Charles!
run_escalated_function() {
  local function_name args_q
  function_name=$1; shift || return
  printf -v args_q '%q ' "$@"
  sudo bash -c "$(declare -f "$function_name"); $function_name $args_q"
}

wimp_init() {
  if [ -d "$wimp_dir" ]; then
    echo "This directory is already watched by a wimp"
  elif [[ -n $(find . -type d -name ".wimp") ]]; then
    echo "This directory already contains a wimp"
  else
    mkdir -p src template public .wimp
    #TODO in 15 lines, create wimp service
    #TODO dynamic service name (sanitizedPath-wimp.service)
    #TODO have the service exec wimp_watch
    if ! [ -f "/etc/systemd/system/wimp.service" ]; then
      touch /etc/systemd/system/wimp.service
    fi
    echo "[Unit]
Description=Run wimp website generator

[Service]
Type=simple
ExecStart=$(pwd)/$0
Restart=on-failure

[Install]
WantedBy=default.target" > /etc/systemd/system/wimp.service
    systemctl daemon-reload
    systemctl enable wimp.service
  fi
}

wimp_compile() {
  #TODO make sure this uses template dynamically
  #TODO convert links automatically
  sh -c 'outpath="${0%.md}.html"; outpath="./public/${outpath##*src/}"; \
if ! [ -d "${outpath%/*}" ]; then mkdir "${outpath%/*}"; fi; \
pandoc --quiet -s "$0" -H template/head.html -B template/before.html \
-A template/after.html -o $outpath' "$@"
}

wimp_compile_all() {
  #TODO make sure this uses template dynamically
  #TODO convert links automatically
  find $wimp_dir/../src/ -name '*.md' -type f -exec sh -c \
'outpath="${0%.md}.html"; outpath="./public/${outpath##*src/}"; \
if ! [ -d "${outpath%/*}" ]; then mkdir "${outpath%/*}"; fi; \
pandoc --quiet -s "$0" -H template/head.html -B template/before.html \
-A template/after.html -o $outpath' {} \;
}

wimp_status() {
  #TODO systemctl status wimp.service
  echo "TODO"
}

wimp_restart() {
  #TODO systemctl restart wimp.service
  echo "TODO"
}

wimp_clean() {
  #TODO stop
  rm -rf $wimp_dir/../src $wimp_dir/../public $wimp_dir/../template $wimp_dir
}

# from Jeff Schaller on stackoverflow, thanks Jeff!
find_config() {
  if [ -d "$1" ]; then
    echo "${PWD%/}/$1"
  elif [ "$PWD" = / ]; then
    false
  else
    (cd .. && find_config "$1") # subshell so we don't affect caller's $PWD
  fi
}

validate() {
  if [ ! -d "$wimp_dir" ]; then
    echo -e "This directory is not watched by a wimp\n(run \`wimp init\`)"; exit
  fi
}

wimp_dir="$(find_config ".wimp")"
if [ $# -eq 0 ]
then
  echo -e "usage: wimp <command>\n(run \`wimp help\` for more information)"
else
  cmd=$1 shift
  case $cmd in
    (init) wimp_init;;
    (status) validate; wimp_status;;
    (restart) validate; wimp_restart;;
    (compile) validate; wimp_compile $@;;
    (compile-all) validate; wimp_compile_all;;
    (clean) validate; wimp_clean;;
    (help) echo -e "The WIMP uses pandoc and inotify to dynamically manage a \
static website\ninit: create a wimp\ncompile-all: manually compile src files\n\
clean: remove all traces of wimp";;
    (*) echo -e "UNRECOGNIZED COMMAND\nusage: wimp <command>\n(run \`wimp help\` for more information)";;
  esac
fi
